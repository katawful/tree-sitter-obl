==============
Plain Function
==============
scn test
begin gamemode
priNtc
set x to getfps
end
---

(source_file
  (script_declaration (reference))
  (block
    (game_feature)
    (statement (function))
    (statement
      (set_statement
        (left (reference))
        (right (function))))))

=====================
Function w/ Arguments
=====================
scn test
begin gamemode
print "hi"
set x to getname player
ar_append x "hi"
let x := ar_construct array
end
---

(source_file
  (script_declaration
    (reference))
  (block
    (game_feature)
    (statement
      (function)
      (args (plain_string)))
    (statement
      (set_statement
        (left (reference))
        (right
          (function)
          (args (reference)))))
        (statement
          (function)
          (args
            (reference)
            (plain_string)))
        (statement
          (let_statement
            (left
              (reference))
            (assignment)
            (right
              (function)
              (args
                (reference)))))))

==============================
Function w/ Function Arguments
==============================
scn test
begin gamemode
printc "name is: %z", getname player
end
---

(source_file
  (script_declaration (reference))
  (block
    (game_feature)
    (statement
      (function)
      (args
        (string (format_specifier)
        (args
          (function)
          (reference)))))))

=====================
Condition w/ Function
=====================
scn test
begin gamemode
if GetGameLoaded
endif
end
---

(source_file
  (script_declaration
    (reference))
  (block
    (game_feature)
    (statement
      (if
        (condition
          (function))))))

======
Method
======
scn test
begin gamemode
let x := player.getname
player.getname
end
---

(source_file
  (script_declaration
    (reference))
  (block
    (game_feature)
    (statement
      (let_statement
        (left
          (reference))
        (assignment)
        (right
          (method
            (reference)
            (function)))))
    (statement
      (method
        (reference)
        (function)))))
